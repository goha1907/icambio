---
description: 
globs: 
alwaysApply: false
---
# Git Workflow

Этот документ описывает правила работы с системой контроля версий Git в проекте.

### 1. Модель ветвления

Мы используем простую модель, основанную на `feature branches`.

- **`main`:** Основная ветка. Содержит стабильный, готовый к развертыванию код. Прямые коммиты в `main` запрещены. Изменения вливаются только через Pull Requests.
- **Feature-ветки:** Для каждой новой задачи (фича, исправление бага, рефакторинг) создается отдельная ветка от `main`.

### 2. Именование веток

Название ветки должно быть коротким, на английском языке и описывать суть задачи. Используем следующий формат:

`{type}/{short-description}`

- **`type`:**
    - `feat`: для новой функциональности.
    - `fix`: для исправления ошибок.
    - `docs`: для изменений в документации.
    - `style`: для исправлений по код-стайлу (форматирование, пропущенные точки с запятой и т.д.).
    - `refactor`: для рефакторинга кода без изменения его внешнего поведения.
    - `test`: для добавления или исправления тестов.
    - `chore`: для рутинных задач, связанных с настройкой проекта, сборкой, CI/CD.

- **Примеры:**
    - `feat/user-login-form`
    - `fix/incorrect-rate-display`
    - `docs/update-readme`
    - `refactor/simplify-auth-service`
    - `chore/setup-eslint`

### 3. Коммиты (Conventional Commits)

Все коммиты должны соответствовать спецификации [Conventional Commits](mdc:https:/www.conventionalcommits.org/ru/v1.0.0). Это позволяет автоматизировать управление версиями и генерацию списка изменений (CHANGELOG).

**Формат сообщения коммита:**

```
<type>[optional scope]: <description>

[optional body]

[optional footer]
```

- **`<type>`:** Тип изменения, совпадает с типами для веток (`feat`, `fix`, `docs`, и т.д.).
- **`[optional scope]`:** Область кодовой базы, которую затронул коммит (например, `auth`, `orders`, `ui`).
- **`<description>`:** Краткое описание изменения в настоящем времени (например, "add login form validation", а не "added..."). Начинается с маленькой буквы, без точки в конце.

- **Примеры:**
    - `feat(auth): add password reset functionality`
    - `fix(exchange): correct currency calculation logic`
    - `docs(readme): update setup instructions`
    - `refactor(api): switch to single axios instance`
    - `style(components): format code with prettier`
    - `chore: add husky for pre-commit hooks`

### 4. Pull Requests (PRs)

1.  **Создание PR:** Когда работа в feature-ветке завершена, создается Pull Request в ветку `main`.
2.  **Описание:** У PR должно быть осмысленное название и описание. В описании нужно кратко изложить, какие изменения были сделаны и зачем. Если PR закрывает какую-то задачу (issue) в трекере, нужно указать ее номер.
3.  **CI/CD:** Перед слиянием все автоматические проверки (линтеры, тесты, сборка) в CI-пайплайне должны успешно пройти.
4.  **Code Review:** Каждый PR должен быть просмотрен как минимум одним другим разработчиком (если это применимо к команде).
5.  **Слияние:** После одобрения и успешного прохождения проверок ветка сливается в `main` с помощью "Squash and merge". Это объединяет все коммиты из ветки в один и позволяет написать чистое, осмысленное сообщение коммита для истории в `main`, следуя стандарту Conventional Commits.
