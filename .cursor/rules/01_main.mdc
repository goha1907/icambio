---
description: 
globs: 
alwaysApply: true
---
# Технологический стек и основные решения

Этот документ описывает ключевые технологии и архитектурные решения, принятые в проекте.

---

## Стек технологий

### 1. Бэкенд
- **Язык/Фреймворк:** Python / Django
- **База данных и Аутентификация:** Supabase
  - Используется как основная база данных (PostgreSQL).
  - Отвечает за аутентификацию пользователей и генерацию **JWT**.
- **Админ-панель:** Собственный интерфейс администратора Django
- **API:** REST API, построенное с помощью Django Rest Framework.

### 2. Фронтенд
- **Основа:** React + TypeScript + Vite
- **Маршрутизация:** React Router v6
- **Управление состоянием:**
  - **React Query (`@tanstack/react-query`):** для всего состояния сервера (запросы к API, кеширование, инвалидация).
  - **Zustand:** для глобального состояния клиента (состояние UI, данные пользователя после логина и т.д.).
- **HTTP-клиент:** Axios
- **UI:**
  - **Стилизация:** Tailwind CSS
  - **Компоненты:** shadcn/ui
  - **Формы:** React Hook Form + Zod
  - **Уведомления:** React-hot-toast

---

## Ключевые архитектурные моменты

### 1. Аутентификация (Supabase JWT)

Процесс аутентификации полностью управляется Supabase.

1.  **Логин/Регистрация:** Фронтенд взаимодействует напрямую с Supabase для аутентификации пользователя.
2.  **Получение токена:** В случае успеха Supabase возвращает JWT (JSON Web Token).
3.  **Взаимодействие с бэкендом:** Фронтенд сохраняет этот токен и прикрепляет его в виде `Authorization: Bearer <token>` ко всем запросам на наш Django-бэкенд.
4.  **Валидация на бэкенде:** Django-бэкенд **не генерирует** токены, а только **валидирует** входящие JWT, полученные от Supabase. Это обеспечивает защиту эндпоинтов.

### 2. Развертывание и DevOps (Целевая архитектура)
- **Контейнеризация:** Docker
- **Кэширование:** Redis
- **Асинхронные задачи:** Redis / Celery
- **CI/CD:** GitLab CI / Jenkins
- **Мониторинг:** Prometheus + Grafana

*(Этот раздел описывает целевую архитектуру и может быть реализован постепенно)*