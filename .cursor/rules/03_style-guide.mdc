---
description: 
globs: 
alwaysApply: true
---
# Style Guide

Этот документ описывает соглашения по стилю кода для фронтенд и бэкенд частей проекта.

## Общие принципы

- **Язык:** Весь код, комментарии и документация пишутся на английском языке. Это стандартная практика в разработке, которая упрощает использование сторонних инструментов и библиотек. Исключение: текстовые данные для пользователей в UI.
- **Форматирование:** Код должен быть автоматически отформатирован перед каждым коммитом. Для этого будут настроены pre-commit хуки.

---

## Frontend (React + TypeScript)

### 1. Линтинг и форматирование

- **Prettier:** Используется для автоматического форматирования кода. Конфигурация находится в `.prettierrc`.
- **ESLint:** Используется для поиска и исправления проблем в коде. Конфигурация находится в `.eslintrc.js`.
- Все правила должны соблюдаться. Отключение правил (`eslint-disable`) допускается только в исключительных случаях с обязательным комментарием, объясняющим причину.

### 2. Именование

- **Компоненты:** `PascalCase` (например, `UserProfile.tsx`).
- **Файлы с хуками:** `useSomething.ts` (например, `useAuth.ts`).
- **Переменные и функции:** `camelCase` (например, `const currentUser`, `function getUserData() {}`).
- **Типы и интерфейсы:** `PascalCase` с префиксом `T` для типов и `I` для интерфейсов (например, `type TUser`, `interface IResponse`).
- **Константы:** `UPPER_SNAKE_CASE` (например, `const API_URL = '...'`).

### 3. Стилизация (Tailwind CSS)

- **Utility-First:** Придерживаемся подхода "utility-first" по максимуму. Стили пишутся непосредственно в `className` у JSX-элементов.
- **Переменные темы:** Все цвета, отступы, шрифты и другие значения должны быть взяты из конфигурации темы в `tailwind.config.js`. Не используйте магические числа (например, `top-[13px]`).
- **Компонентные классы:** Вынесение классов в CSS-файлы с помощью директивы `@apply` следует использовать с осторожностью. Это оправдано только для действительно переиспользуемых, сложных компонентов (например, кастомные кнопки, инпуты), которые не покрываются базовыми компонентами `shadcn/ui`.
- **Адаптивность:** Используйте мобильный-первый подход (mobile-first). Сначала стили пишутся для мобильных устройств, а затем расширяются для больших экранов с помощью префиксов (`md:`, `lg:`).

### 4. Компоненты

- **Функциональные компоненты:** Используем только функциональные компоненты с хуками.
- **Декомпозиция:** Разбивайте большие компоненты на более мелкие, переиспользуемые. Компонент должен отвечать за одну задачу.
- **Импорты:** Группируйте импорты:
    1. Внешние библиотеки (React, react-router-dom).
    2. Абсолютные импорты из проекта (`@/features`, `@/shared`).
    3. Относительные импорты (`./`, `../`).
    4. Импорты стилей.

---

## Backend (Python + Django)

### 1. Форматирование и линтинг

- **Black:** Используется для автоматического форматирования кода.
- **Flake8 (или Ruff):** Используется для линтинга.
- **isort:** Для автоматической сортировки импортов.

### 2. Именование

- **Переменные, функции, методы:** `snake_case` (например, `current_user`, `get_user_data`).
- **Классы:** `PascalCase` (например, `UserSerializer`).
- **Константы:** `UPPER_SNAKE_CASE` (например, `DEFAULT_ORDER_STATUS`).
- **Модули (файлы):** `snake_case.py` (например, `user_services.py`).

### 3. Структура кода

- **DRF (Django Rest Framework):**
    - **Views:** Предпочтительно использовать `GenericAPIView` и миксины или `ModelViewSet` для стандартных CRUD-операций.
    - **Serializers:** Вся логика валидации и (де)сериализации данных должна находиться в сериализаторах.
    - **Permissions:** Логика доступов выносится в отдельные классы разрешений.
- **Бизнес-логика:** Сложную бизнес-логику следует выносить из Views в отдельные сервисные функции или классы, чтобы не перегружать представления.
