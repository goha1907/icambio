---
description: 
globs: 
alwaysApply: false
---
# ✍️ Руководство по написанию тестов

**Цель:** Обеспечить стабильность и надежность приложения через автоматическое тестирование, не замедляя при этом разработку.

---

### 1. Философия тестирования

1.  **Тестируй важное, а не всё подряд.** В первую очередь тестами покрывается критически важная и сложная бизнес-логика, а не каждая строчка кода.
2.  **Тесты — это документация.** Хороший тест объясняет, как должен работать компонент или функция. Имена тестов должны быть описательными.
3.  **Быстрые и надежные.** Тесты должны выполняться быстро и давать стабильный результат (отсутствие "flaky" тестов).

---

### 2. Что мы тестируем?

| Тип теста     | Инструменты       | Что проверяем                                                                        | Расположение                               |
|---------------|-------------------|--------------------------------------------------------------------------------------|--------------------------------------------|
| **Unit-тесты**  | `vitest`          | • Схемы валидации (`Zod`) <br> • Сложные хуки (`useComplexLogic`) <br> • Сервисные функции (`authService`) <br> • Чистые функции-хелперы (`formatDate`) | Рядом с кодом: `feature/tests/file.test.ts` |
| **Интеграционные тесты** | `vitest`, `RTL` | • Взаимодействие нескольких компонентов (например, форма и таблица) <br> • Работу хуков React Query с моками API | Рядом с кодом: `feature/tests/integration.test.ts` |

*RTL = @testing-library/react*

### 3. Что мы НЕ тестируем?

-   **Внешние зависимости:** Не тестируем `axios` или `supabase-js`. Мы мокаем их ответы.
-   **Простые UI-компоненты:** Не нужно писать тесты на то, что кнопка отображает текст. Это покрывается интеграционными тестами более высокого уровня.
-   **Стили:** Не проверяем, что у элемента `color: red`.

---

### 4. Как писать тесты

Используем подход **AAA (Arrange, Act, Assert)**:

```typescript
import { describe, it, expect } from 'vitest'

describe('MyAwesomeComponent', () => {
  it('should do something amazing when clicked', () => {
    // 1. Arrange (Подготовка)
    // - Рендерим компонент
    // - Находим нужные элементы
    // - Устанавливаем моки
    const { getByText } = render(<MyAwesomeComponent />);
    const button = getByText('Click me');

    // 2. Act (Действие)
    // - Симулируем действие пользователя
    fireEvent.click(button);

    // 3. Assert (Проверка)
    // - Проверяем, что результат соответствует ожиданиям
    expect(getByText('Amazing thing happened!')).toBeInTheDocument();
  });
});
```

### 5. Запуск тестов

-   `yarn test`: Запустить все тесты один раз в консоли.
-   `yarn test:ui`: Запустить тесты в интерактивном UI-режиме для удобной отладки.

Этот подход позволит нам писать полезные тесты, которые помогают, а не мешают разработке.
